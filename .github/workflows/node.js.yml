# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: jobberman
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      LOGLEVEL: ${{ secrets.LOGLEVEL }}
      Version: ${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
      name: List the state of node modules
      continue-on-error: true
      run: npm list

    - run: npm ci
    - run: npm run lint
    - run: npm run build --if-present
    # - run: npm run test
    # - name: Codecov

    - name: Send GitHub Action data to a Slack workflow
      uses: slackapi/slack-github-action@v2.0.0
      with:
        webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
        webhook-type: webhook-trigger
        payload: |
          status: "${{ job.status }}"
          option: "false"
    # - name: Delete Artifact by Name
    #   uses: jimschubert/delete-artifacts-action@v1
    #   with:
    #     log_level: 'debug'
    #     artifact_name: '${{ github.event.client_payload.base_name }}.${{ strategy.job-index }}'
    #     min_bytes: '0'
    - uses: actions/upload-artifact@v4
      with:
        name: my-artifact-${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}.${{ strategy.job-index }}
        path: build
    - uses: ncipollo/release-action@v1
      with:
        artifacts: "my-artifact-${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}.${{ strategy.job-index }}"
  
  package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: my-artifact-${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}.${{ strategy.job-index }}
          path: build
      # - run: echo build.zip
      # - run: zip -r build.zip build/
      - name: Display structure of downloaded files
        run: ls -R build

      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: user/app:latest
                  
      - name: "Configure AWS Credentials"
        # You may pin to the exact commit or the version.
        # uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: ${{ vars.AWS_ACCESS_KEY_ID }}
          role-to-assume: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-session-token: ${{ vars.AWS_ACCESS_KEY_ID }}
          
      - name: aws secret mnager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            secretId1
            ENV_VAR_NAME, secretId2
          name-transformation: (Optional) uppercase|lowercase|none
          parse-json-secrets: (Optional) true|false
          auto-select-family-attempt-timeout: (Optional) positive integer
   
      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: my-ecr-public-registry-alias
          REPOSITORY: my-ecr-public-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

    