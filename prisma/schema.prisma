// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  email     String   @unique
  website   String   @db.VarChar(255)
  size      String   @db.VarChar(255)
  job       Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
  address   Address  @relation(fields: [addressId], references: [id])
  addressId String   @unique
}

model Address {
  id                  String   @id @default(uuid())
  street              String   @db.VarChar(255)
  street2             String?  @db.VarChar(255)
  city                String?  @db.VarChar(255)
  state_province_code String?  @db.VarChar(255)
  state_province_name String?  @db.VarChar(255)
  postal_code         String?  @db.VarChar(255)
  country_code        String?  @db.VarChar(255)
  latitude            Int?
  longitude           Int?
  country             String   @db.VarChar(255)
  company             Company?
  user                User?
}

model Job {
  id                          String                @id @default(uuid())
  title                       String                @db.VarChar(255)
  subtitle                    String                @db.VarChar(255)
  description                 String                @db.VarChar(255)
  qualification               String                @db.VarChar(255)
  complimentary_qualification String                @db.VarChar(255)
  job_type                    String                @db.VarChar(255)
  visa_sponsorship            String                @db.VarChar(255)
  remote_posible              String                @db.VarChar(255)
  preferred_timezones         String                @db.VarChar(255)
  location                    String                @db.VarChar(255)
  date_posted                 String                @db.VarChar(255)
  relocation                  String                @db.VarChar(255)
  skills                      String                @db.VarChar(255)
  employer_hiring_contact     String                @db.VarChar(255)
  descriptionFormatting       String                @db.VarChar(255)
  probationaryPeriod          String                @db.VarChar(255)
  company                     Company               @relation(fields: [company_id], references: [id])
  company_id                  String                @unique
  salary                      Salary                @relation(fields: [salaryId], references: [id])
  salaryId                    String                @unique
  metadata                    MetaData              @relation(fields: [metadataId], references: [id])
  metadataId                  String                @unique
  hasProbationPeriod          HasProbationaryPeriod @relation(fields: [hasProbationPeriodId], references: [id])
  hasProbationPeriodId        String                @unique
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
}

model HasProbationaryPeriod {
  id     String  @id @default(uuid())
  period String
  status Boolean
  job    Job?
}

model MetaData {
  id            String @id @default(uuid())
  atsName       String @db.VarChar(255)
  employersName String @db.VarChar(255)
  job           Job?
}

model Salary {
  id                             String                       @id @default(uuid())
  currency                       String                       @db.VarChar(255)
  maximumMinor                   String                       @db.VarChar(255)
  minimumMinor                   String                       @db.VarChar(255)
  period                         String                       @db.VarChar(255)
  fineGrainedSalaryInformation   FineGrainedSalaryInformation @relation(fields: [fineGrainedSalaryInformationId], references: [id])
  fineGrainedSalaryInformationId String                       @unique
  taskBasedSalaryInformation     TaskBasedSalaryInformation   @relation(fields: [taskBasedSalaryInformationId], references: [id])
  taskBasedSalaryInformationId   String                       @unique
  Job                            Job?
}

model FineGrainedSalaryInformation {
  id                       String  @id @default(uuid())
  totalSalaryMinor         String  @db.VarChar(255)
  workingHours             Int
  totalOvertimeHours       Int?
  statutoryOvertimeHours   Int?
  fixedOvertimeSalaryMinor String? @db.VarChar(255)
  fixedOvertimePay         Boolean
  salary                   Salary?
}

model TaskBasedSalaryInformation {
  id                String  @id @default(uuid())
  taskLengthMinutes String  @db.VarChar(255)
  taskDescription   String? @db.VarChar(255)
  salary            Salary?
}

model User {
  id                String    @id @default(uuid())
  username          String    @unique
  hashed_password   String    @db.VarChar(255)
  first_name        String    @db.VarChar(255)
  last_name         String    @db.VarChar(255)
  email             String    @unique
  is_email_verified Boolean   @default(false)
  verificationCode  String?
  passwordResetCode String?
  session           Session[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  company           Company?  @relation(fields: [companyId], references: [id])
  companyId         String?
  address           Address   @relation(fields: [addressId], references: [id])
  addressId         String    @unique
}

model Session {
  id         String   @id @default(uuid())
  user_agent String   @db.VarChar(255)
  client_ip  String   @db.VarChar(255)
  is_blocked Boolean  @default(false)
  valid      Boolean  @default(true)
  user       User     @relation(fields: [username], references: [username])
  username   String
  createdAt  DateTime @default(now())
}
